INCLUDE(${CMAKE_SOURCE_DIR}/my_cmake_def.txt)

if (EXISTS ${CMAKE_SOURCE_DIR}/../.git/HEAD)
    file(STRINGS ${CMAKE_SOURCE_DIR}/../.git/HEAD GIT_HEAD)
    add_definitions(-DGIT_HEAD="${GIT_HEAD}")
else()
    add_definitions(-DGIT_HEAD="unknown")
endif()

if (EXISTS ${CMAKE_SOURCE_DIR}/../.git/FETCH_HEAD)
    file(STRINGS ${CMAKE_SOURCE_DIR}/../.git/FETCH_HEAD GIT_FETCH_HEAD LIMIT_INPUT 40)
    add_definitions(-DGIT_FETCH_HEAD="${GIT_FETCH_HEAD}")
else()
    add_definitions(-DGIT_FETCH_HEAD="unknown")
    message(WARNING "Please git pull")
endif()

aux_source_directory(./cmd_exp BS_SRC)
aux_source_directory(./exec BS_SRC)
aux_source_directory(./comp BS_SRC)
aux_source_directory(./func_tbl BS_SRC)
aux_source_directory(./ic BS_SRC)
aux_source_directory(./loadbs BS_SRC)
aux_source_directory(./mem BS_SRC)
aux_source_directory(./rcu_engine BS_SRC)
aux_source_directory(./mtimer BS_SRC)
aux_source_directory(./plug_container BS_SRC)
aux_source_directory(./process_key BS_SRC)
aux_source_directory(./secInit BS_SRC)
aux_source_directory(./sockshow BS_SRC)
aux_source_directory(./splx BS_SRC)
aux_source_directory(./syscfg BS_SRC)
aux_source_directory(./sysinfo BS_SRC)
aux_source_directory(./sysrun BS_SRC)
aux_source_directory(./thread BS_SRC)
aux_source_directory(./timer BS_SRC)
aux_source_directory(./vtimer BS_SRC)
aux_source_directory(./poller BS_SRC)
aux_source_directory(./data_box BS_SRC)

add_library(bs SHARED ${BS_SRC} )
target_compile_definitions(bs PRIVATE USE_BS)
TARGET_LINK_LIBRARIES(bs util unixlike_util ncurses m pthread pcre ssl crypto)
set_target_properties(bs PROPERTIES output_name "bs")

#INSTALL(TARGETS bs DESTINATION /usr/local/lib)

add_library(static_bs ${BS_SRC})
set_property(TARGET static_bs PROPERTY POSITION_INDEPENDENT_CODE ON)

